// Game Specific language list. Auto-Generated by LocLanguagesScriptable.cs
using System.Collections.Generic;
using UnityEngine.TextCore.LowLevel;

public enum LocLanguages
{
    English,
    Brazilian_Portuguese,
    Chinese_Simplified,
    Chinese_Traditional,
    French,
    German,
    Italian,
    Japanese,
    Korean,
    Spanish,
}

namespace Localisation.Localisation
{
    public static class LocLanguagesInfo
    {
        [System.Serializable]
        public class LanguageImportData
        {
            public string cultureVariantId = "en";
            public GlyphRenderMode renderMode = GlyphRenderMode.SDFAA;
            public int padding = 4;
        }


        /// <summary> Which languages must be drawn from Right To Left. </summary>
        public static readonly List<LocLanguages> RightToLeftLanguages = new List<LocLanguages>()
        {
        };

        /// <summary> Which Language should the default System Language of the device convert into. Defaults to English if System Language is not specified here. </summary>
        public static readonly Dictionary<UnityEngine.SystemLanguage, LocLanguages> SystemLangToLocLang = new Dictionary<UnityEngine.SystemLanguage, LocLanguages>()
        {
            { UnityEngine.SystemLanguage.English,     LocLanguages.English },
            { UnityEngine.SystemLanguage.Portuguese,     LocLanguages.Brazilian_Portuguese },
            { UnityEngine.SystemLanguage.ChineseSimplified,     LocLanguages.Chinese_Simplified },
            { UnityEngine.SystemLanguage.ChineseTraditional,     LocLanguages.Chinese_Traditional },
            { UnityEngine.SystemLanguage.French,     LocLanguages.French },
            { UnityEngine.SystemLanguage.German,     LocLanguages.German },
            { UnityEngine.SystemLanguage.Italian,     LocLanguages.Italian },
            { UnityEngine.SystemLanguage.Japanese,     LocLanguages.Japanese },
            { UnityEngine.SystemLanguage.Korean,     LocLanguages.Korean },
            { UnityEngine.SystemLanguage.Spanish,     LocLanguages.Spanish },
        };

        /// <summary> Converts Loc Language back to System Language. </summary>
        public static readonly Dictionary<LocLanguages, UnityEngine.SystemLanguage> LocLangToSystemLang = new System.Func<Dictionary<LocLanguages, UnityEngine.SystemLanguage>>(() =>
        {
            Dictionary<LocLanguages, UnityEngine.SystemLanguage> locLangToSystemLang = new(SystemLangToLocLang.Count);
            foreach (var pair in SystemLangToLocLang)
                locLangToSystemLang[pair.Value] = pair.Key;
            return locLangToSystemLang;
        })();

        /// <summary> This is used by the Google Doc Import Tool to determine which settings it should use per language. </summary>
        public static readonly Dictionary<LocLanguages, LanguageImportData> LocLanguageToImportInfo = new Dictionary<LocLanguages, LanguageImportData>()
        {
           { LocLanguages.English, new LanguageImportData()
                {
                    cultureVariantId = "en",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Brazilian_Portuguese, new LanguageImportData()
                {
                    cultureVariantId = "pt-br",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Chinese_Simplified, new LanguageImportData()
                {
                    cultureVariantId = "zh-hans",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Chinese_Traditional, new LanguageImportData()
                {
                    cultureVariantId = "zh-Hant",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.French, new LanguageImportData()
                {
                    cultureVariantId = "fr",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.German, new LanguageImportData()
                {
                    cultureVariantId = "de",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Italian, new LanguageImportData()
                {
                    cultureVariantId = "it",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Japanese, new LanguageImportData()
                {
                    cultureVariantId = "ja",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Korean, new LanguageImportData()
                {
                    cultureVariantId = "ko",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

           { LocLanguages.Spanish, new LanguageImportData()
                {
                    cultureVariantId = "es",
                    renderMode = GlyphRenderMode.SDFAA,
                    padding = 4,
                }
           },

        };
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        //                   Languages Info                       
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        /// <summary> Internal use flags for languages. You should continue to use LocLanguages for most things if not doing internal system stuff. </summary>
        [System.Flags]
        public enum LocLanguageFlags
        {
            English = 1 << 0,
            Brazilian_Portuguese = 1 << 1,
            Chinese_Simplified = 1 << 2,
            Chinese_Traditional = 1 << 3,
            French = 1 << 4,
            German = 1 << 5,
            Italian = 1 << 6,
            Japanese = 1 << 7,
            Korean = 1 << 8,
            Spanish = 1 << 9,
        }

        /// <summary> Internal use for converting Language Flags for languages to individual Language (array). </summary>
        public static LocLanguages[] LocLanguageFlagsToLocLanguages(LocLanguageFlags flags)
        {
            List<LocLanguages> languages = new List<LocLanguages>();
            if (flags.HasFlag(LocLanguageFlags.English)) languages.Add(LocLanguages.English);
            if (flags.HasFlag(LocLanguageFlags.Brazilian_Portuguese)) languages.Add(LocLanguages.Brazilian_Portuguese);
            if (flags.HasFlag(LocLanguageFlags.Chinese_Simplified)) languages.Add(LocLanguages.Chinese_Simplified);
            if (flags.HasFlag(LocLanguageFlags.Chinese_Traditional)) languages.Add(LocLanguages.Chinese_Traditional);
            if (flags.HasFlag(LocLanguageFlags.French)) languages.Add(LocLanguages.French);
            if (flags.HasFlag(LocLanguageFlags.German)) languages.Add(LocLanguages.German);
            if (flags.HasFlag(LocLanguageFlags.Italian)) languages.Add(LocLanguages.Italian);
            if (flags.HasFlag(LocLanguageFlags.Japanese)) languages.Add(LocLanguages.Japanese);
            if (flags.HasFlag(LocLanguageFlags.Korean)) languages.Add(LocLanguages.Korean);
            if (flags.HasFlag(LocLanguageFlags.Spanish)) languages.Add(LocLanguages.Spanish);
            return languages.ToArray();
        }
    }
}
